
import pytest
import numpy as np
from numpy.testing import assert_allclose #, assert_approx_equal

# See for C to assert_approx_equal:
# https://stackoverflow.com/questions/16839658/printf-width-specifier-to-maintain-precision-of-floating-point-value

from qlsc import QLSC

# bin_level, ipix, [[ra1,dec1], ... , [ran,decn]]

# bin level 0
qlsc0_expected_results = [
	(0, 0, np.array([[315., 35.26438968], [45., 35.26438968], [135., 35.26438968], [225., 35.26438968]])),
	(0, 1, np.array([[315.0, -35.264389682754654], [45.0, -35.264389682754654], [45.0, 35.264389682754654], [315.0, 35.264389682754654]])),
	(0, 2, np.array([[45.0, -35.264389682754654], [135.0, -35.264389682754654], [135.0, 35.264389682754654], [45.0, 35.264389682754654]])),
	(0, 3, np.array([[135.0, -35.264389682754654], [225.0, -35.264389682754654], [225.0, 35.264389682754654], [135.0, 35.264389682754654]])),
	(0, 4, np.array([[225.0, -35.264389682754654], [315.0, -35.264389682754654], [315.0, 35.264389682754654], [225.0, 35.264389682754654]])),
	(0, 5, np.array([[225.0, -35.264389682754654], [135.0, -35.264389682754654], [45.0, -35.264389682754654], [315.0, -35.264389682754654]]))
]

# bin level 2
qlsc2_expected_results = [
	(2, 21, np.array([[26.56505118, -41.8103149], [45., -35.26438968], [ 45., -19.47122063], [ 26.56505118, -24.09484255]])),
	(2, 0, np.array([[315., 35.26438968], [333.43494882, 41.8103149], [315., 54.73561032], [296.56505118, 41.8103149]])),
	(2, 10, np.array([[243.43494882, 41.8103149], [225., 54.73561032], [206.56505118, 41.8103149], [225., 35.26438968]])),
	(2, 60, np.array([[180., 0.], [206.56505118, 0.], [206.56505118, 24.09484255], [180., 26.56505118]]))
]

# bin level 10
qlsc10_expected_results = [
	(10, 1123456, np.array([[336.3706222693432, -38.21416175691502], [336.4646171068093, -38.23410604406816], [336.4646171068093, -38.17074948425823], [336.3706222693432, -38.150815876492366]])),
	(10, 4072375, np.array([[182.57210462788328, 34.25305856945815], [182.68377515946898, 34.25067408080925], [182.68377515946898, 34.32697941232311], [182.57210462788328, 34.32936639388736]]))
]

# bin level 30 (max)
qlsc30_expected_results = [
	(30, 6437157808037343522, np.array([[303.99999460974766, -89.00000003520915], [303.9999980286991, -89.00000012365851], [304.0000030975036, -89.00000006399867], [303.99999967855194, -88.99999997554931]])),
	(30, 2017612633061982208, np.array([[0.0, 0.0], [1.0672170578144923e-07, 0.0], [1.0672170578144923e-07, 1.0672170578144923e-07], [0.0, 1.0672170578144923e-07]])),
	(30, 6629364818475238354, np.array([[43.99999803104112, -89.00000005741951], [44.00000242914403, -88.99999998330696], [43.9999981819457, -88.99999990656117], [43.99999378384282, -88.99999998067372]]))
	
]

expected_results = qlsc0_expected_results + qlsc2_expected_results + qlsc10_expected_results + qlsc30_expected_results

@pytest.mark.parametrize("bin_level, ipix, polygon", expected_results)
def test_ipix2polygon(bin_level, ipix, polygon):
	'''
	Test QLSC ipix2polygon.
	'''
	q = QLSC(bin_level=bin_level)
	assert_allclose(polygon, q.ipix2polygon(ipix))
