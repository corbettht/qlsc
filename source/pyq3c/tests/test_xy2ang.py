
import pytest
from numpy.testing import assert_approx_equal

# See for C to assert_approx_equal:
# https://stackoverflow.com/questions/16839658/printf-width-specifier-to-maintain-precision-of-floating-point-value

from pyq3c import Q3C

# facenum. x, y, ra, dec (ra,dec)
expected_results = [
	(1, -1, -1, 315.0, -35.264389682754654),
	(1, -1, 0, 315.0, 0.0),
	(1, -1, 0.5, 315.0, 19.471220634490695),
	(1, -1, 1, 315.0, 35.264389682754654),
	(1, -0.5, -1, 333.434948822922, -41.810314895778596),
	(1, -0.5, 0, 333.434948822922, 0.0),
	(1, -0.5, 0.5, 333.434948822922, 24.094842552110702),
	(1, -0.5, 1, 333.434948822922, 41.810314895778596),
	(1, 0, -1, 0.0, -45.0),
	(1, 0, -0.5, 0.0, -26.565051177077994),
	(1, 0, 0, 0.0, 0.0),
	(1, 0, -0.5, 0.0, -26.565051177077994),
	(1, 0, 1, 0.0, 45.0),
	(1, 1, -1, 45.0, -35.264389682754654),
	(1, 1, -0.5, 45.0, -19.471220634490695),
	(1, 1, 0, 45.0, 0.0),
	(1, 1, 0.5, 45.0, 19.471220634490695),
	(1, 1, 1, 45.0, 35.264389682754654),
	(1, -0.89, -0.78, 318.33091738045005, -30.227545473493738),
	(1, -0.45, 0.75, 335.77225468204585, 34.36982990138405),
	(3, -1, -1, 135.0, -35.264389682754654),
	(3, -1, 0, 135.0, 0.0),
	(3, -1, 0.5, 135.0, 19.471220634490695),
	(3, -1, 1, 135.0, 35.264389682754654),
	(3, -0.5, -1, 153.434948822922, -41.810314895778596),
	(3, -0.5, 0, 153.434948822922, 0.0),
	(3, -0.5, 0.5, 153.434948822922, 24.094842552110702),
	(3, -0.5, 1, 153.434948822922, 41.810314895778596),
	(3, 0, -1, 180.0, -45.0),
	(3, 0, -0.5, 180.0, -26.565051177077994),
	(3, 0, 0, 180.0, 0.0),
	(3, 0, -0.5, 180.0, -26.565051177077994),
	(3, 0, 1, 180.0, 45.0),
	(3, 1, -1, 225.0, -35.264389682754654),
	(3, 1, -0.5, 225.0, -19.471220634490695),
	(3, 1, 0, 225.0, 0.0),
	(3, 1, 0.5, 225.0, 19.471220634490695),
	(3, 1, 1, 225.0, 35.264389682754654),
	(3, -0.89, -0.78, 138.33091738045005, -30.227545473493738),
	(3, -0.45, 0.75, 155.77225468204583, 34.36982990138405),
	(0, -1, -1, 315.0, 35.264389682754654),
	(0, -1, 0, 270.0, 45.0),
	(0, -1, 0.5, 243.43494882292202, 41.810314895778596),
	(0, -1, 1, 225.0, 35.264389682754654),
	(0, -0.5, -1, 333.434948822922, 41.810314895778596),
	(0, -0.5, 0, 270.0, 63.43494882292202),
	(0, -0.5, 0.5, 225.0, 54.735610317245346),
	(0, -0.5, 1, 206.565051177078, 41.810314895778596),
	(0, 0, -1, 0.0, 45.0),
	(0, 0, -0.5, 0.0, 63.43494882292202),
	(0, 0, 0, 180.0, 90.0),
	(0, 0, -0.5, 0.0, 63.43494882292202),
	(0, 0, 1, 180.0, 45.0),
	(0, 1, -1, 45.0, 35.264389682754654),
	(0, 1, -0.5, 63.43494882292201, 41.810314895778596),
	(0, 1, 0, 90.0, 45.0),
	(0, 1, 0.5, 116.56505117707799, 41.810314895778596),
	(0, 1, 1, 135.0, 35.264389682754654),
	(0, -0.89, -0.78, 311.23147029086465, 40.197922719256006),
	(0, -0.45, 0.75, 210.96375653207352, 48.82566879096404),
	(5, -1, -1, 225.0, -35.264389682754654),
	(5, -1, 0, 270.0, -45.0),
	(5, -1, 0.5, 296.565051177078, -41.810314895778596),
	(5, -1, 1, 315.0, -35.264389682754654),
	(5, -0.5, -1, 206.565051177078, -41.810314895778596),
	(5, -0.5, 0, 270.0, -63.43494882292202),
	(5, -0.5, 0.5, 315.0, -54.735610317245346),
	(5, -0.5, 1, 333.434948822922, -41.810314895778596),
	(5, 0, -1, 180.0, -45.0),
	(5, 0, -0.5, 180.0, -63.43494882292202),
	(5, 0, 0, 0.0, -90.0),
	(5, 0, -0.5, 180.0, -63.43494882292202),
	(5, 0, 1, 0.0, -45.0),
	(5, 1, -1, 135.0, -35.264389682754654),
	(5, 1, -0.5, 116.56505117707799, -41.810314895778596),
	(5, 1, 0, 90.0, -45.0),
	(5, 1, 0.5, 63.43494882292201, -41.810314895778596),
	(5, 1, 1, 45.0, -35.264389682754654),
	(5, -0.89, -0.78, 228.76852970913538, -40.197922719256006),
	(5, -0.45, 0.75, 329.03624346792645, -48.82566879096404)
]

@pytest.mark.parametrize("facenum, x, y, ra, dec", expected_results)
def test_xy2ang(facenum, x, y, ra, dec):
	'''
	Test Q3C xy2facenum. This is independent of bin size.
	'''
	qlsc = Q3C(bin_level=1) # the bin level doesn't matter
	ra_out, dec_out = qlsc.xy2ang(facenum=facenum, x=x, y=y)
	assert_approx_equal(ra, ra_out)
	assert_approx_equal(dec, dec_out)
	
